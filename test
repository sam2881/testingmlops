def flatten_schema(schema, prefix=''):
    """
    This function creates a flat list of columns with their full paths from a nested schema.
    """
    fields = []
    for field in schema.fields:
        if isinstance(field.dataType, StructType):
            fields += flatten_schema(field.dataType, prefix + field.name + '.')
        elif isinstance(field.dataType, ArrayType) and isinstance(field.dataType.elementType, StructType):
            fields += flatten_schema(field.dataType.elementType, prefix + field.name + '.')
        else:
            fields.append(prefix + field.name)
    return fields

# Use the function to get a flat list of column names
flat_columns = flatten_schema(df.schema)

# Now you can select columns directly using the flat column names list
# Make sure to replace dots with underscores or other separators if you directly want to access them
df = df.select([col(name).alias(name.replace('.', '_')) for name in flat_columns])
