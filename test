def extract_column_names(schema, parent_prefix="", used_names=set()):
    """Extract column names based on the DataFrame schema, only using the last part of the name, handling duplicates."""
    column_names = []
    for field in schema.fields:
        snake_case_name = camel_to_snake(field.name)
        full_name = f"{parent_prefix}.{field.name}" if parent_prefix else field.name
        if snake_case_name in used_names:
            snake_case_name = f"{camel_to_snake(parent_prefix.split('.')[-1])}_{snake_case_name}"
        used_names.add(snake_case_name)

        if isinstance(field.dataType, StructType):
            nested_columns = extract_column_names(field.dataType, full_name, used_names)
            column_names.extend(nested_columns)
        elif isinstance(field.dataType, ArrayType):
            element_type = field.dataType.elementType
            if isinstance(element_type, StructType):
                nested_columns = extract_column_names(element_type, f"{full_name}.element", used_names)
                column_names.extend(nested_columns)
            else:
                column_names.append((full_name, snake_case_name))
        else:
            column_names.append((full_name, snake_case_name))
    return column_names
