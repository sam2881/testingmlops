def generate_select_expressions(schema, parent_prefix=""):
    """Recursively generate select expressions from the schema, handling arrays and structs."""
    expressions = []
    path_tracker = {}  # Track paths to handle duplicates

    def process_field(field, current_path):
        # Generate the alias using snake_case conversion
        alias = camel_to_snake(current_path.replace('.', '_'))
        if alias in path_tracker:
            # If duplicate, prepend the parent field name to make it unique
            parent_field = current_path.split('.')[-2]
            alias = camel_to_snake(parent_field + '_' + field.name)
        path_tracker[alias] = current_path
        return col(current_path).alias(alias)

    def parse_schema(schema, prefix=""):
        for field in schema.fields:
            current_path = f"{prefix}.{field.name}".strip('.')
            if isinstance(field.dataType, StructType):
                parse_schema(field.dataType, current_path)
            elif isinstance(field.dataType, ArrayType) and isinstance(field.dataType.elementType, StructType):
                # For arrays of structs, handle as a single column initially
                # Note: You might choose to explode them during actual DataFrame transformations
                expressions.append(process_field(field, current_path))
            else:
                expressions.append(process_field(field, current_path))

    parse_schema(schema)
    return expressions
