def flatten(df, prefix=""):
    """
    Flattens the DataFrame and renames columns to keep track of original paths.
    """
    complex_fields = [f.name for f in df.schema.fields if isinstance(f.dataType, (ArrayType, StructType))]
    while complex_fields:
        col_name = complex_fields.pop(0)
        new_prefix = f"{prefix}{col_name}_" if prefix else f"{col_name}_"

        if isinstance(df.schema[col_name].dataType, StructType):
            for field in df.schema[col_name].dataType.fields:
                df = df.withColumn(f"{new_prefix}{field.name}", col(f"{col_name}.{field.name}"))
            df = df.drop(col_name)
        elif isinstance(df.schema[col_name].dataType, ArrayType) and isinstance(df.schema[col_name].dataType.elementType, StructType):
            df = df.withColumn(col_name, explode_outer(col(col_name)))
            for field in df.schema[col_name].dataType.elementType.fields:
                df = df.withColumn(f"{new_prefix}{field.name}", col(f"{col_name}.{field.name}"))
            df = df.drop(col_name)
        complex_fields = [f.name for f in df.schema.fields if isinstance(f.dataType, (ArrayType, StructType))]

    return df
flattened_df = flatten(df)
actual_column_paths = flattened_df.columns
