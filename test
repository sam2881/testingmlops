def process_nested_fields(df, field_name, path=''):
    """Generate select expressions for nested fields, managing arrays and structures."""
    select_exprs = []
    for field in df.schema[field_name].dataType:
        full_field_name = f"{path}{field_name}.{field.name}" if path else f"{field_name}.{field.name}"
        if isinstance(field.dataType, StructType):
            select_exprs += process_nested_fields(df, field.name, full_field_name + ".")
        elif isinstance(field.dataType, ArrayType) and isinstance(field.dataType.elementType, StructType):
            # Explode the array first to handle nested structures
            exploded_df = df.withColumn(full_field_name, explode_outer(col(full_field_name)))
            select_exprs += process_nested_fields(exploded_df, field.name, full_field_name + ".")
        else:
            alias = camel_to_snake(full_field_name.replace('.', '_'))
            select_exprs.append(col(full_field_name).alias(alias))
    return select_exprs

def generate_select_statements(df):
    """Wrapper function to generate select expressions for the entire DataFrame schema."""
    expressions = []
    for field in df.schema.fields:
        if isinstance(field.dataType, StructType):
            expressions += process_nested_fields(df, field.name)
        elif isinstance(field.dataType, ArrayType) and isinstance(field.dataType.elementType, StructType):
            # Explode and handle nested structures within arrays at the top level
            exploded_df = df.withColumn(field.name, explode_outer(col(field.name)))
            expressions += process_nested_fields(exploded_df, field.name, field.name + ".")
        else:
            snake_case_alias = camel_to_snake(field.name)
            expressions.append(col(field.name).alias(snake_case_alias))
    return expressions
