def generate_select_expressions(schema, parent_prefix=""):
    """
    Generate select expressions based on the DataFrame schema with snake_case aliases.
    Handles nested structures and arrays by using appropriate flattening or exploding when necessary.
    """
    expressions = []
    for field in schema.fields:
        full_field_name = f"{parent_prefix}{field.name}" if parent_prefix else field.name
        if isinstance(field.dataType, StructType):
            # Recursive call for nested StructType
            nested_expressions = generate_select_expressions(field.dataType, full_field_name + ".")
            expressions.extend(nested_expressions)
        elif isinstance(field.dataType, ArrayType) and isinstance(field.dataType.elementType, StructType):
            # Use explode for arrays to handle struct elements individually
            exploded_field = f"exploded_{camel_to_snake(field.name)}"
            expressions.append(explode(col(full_field_name)).alias(exploded_field))
            nested_expressions = generate_select_expressions(field.dataType.elementType, exploded_field + ".")
            expressions.extend(nested_expressions)
        else:
            # Generate snake_case alias for simple types
            snake_case_alias = camel_to_snake(full_field_name.replace('.', '_'))
            expressions.append(col(full_field_name).alias(snake_case_alias))
    return expressions
