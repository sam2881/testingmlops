def generate_select_expressions(schema, parent_prefix=""):
    expressions = []
    duplicates = set()
    
    def add_expression(field_path, alias):
        if alias in duplicates:
            # Append parent field to alias if it's a duplicate
            parts = field_path.split('.')
            if len(parts) > 1:
                alias = camel_to_snake(parts[-2] + '_' + parts[-1])
        expressions.append(col(field_path).alias(alias))
        duplicates.add(alias)

    def parse_schema(schema, prefix=""):
        for field in schema.fields:
            current_path = f"{prefix}.{field.name}".strip('.')
            if isinstance(field.dataType, StructType):
                parse_schema(field.dataType, current_path)
            elif isinstance(field.dataType, ArrayType) and isinstance(field.dataType.elementType, StructType):
                # Exploding arrays to simplify, but this might need to be handled more subtly depending on use case
                exploded_path = f"exploded_{current_path.replace('.', '_')}"
                expressions.append(explode(col(current_path)).alias(exploded_path))
                parse_schema(field.dataType.elementType, exploded_path)
            else:
                add_expression(current_path, camel_to_snake(field.name))

    parse_schema(schema)
    return expressions
