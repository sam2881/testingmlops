def camel_to_snake(name):
    """Convert camelCase string to snake_case string."""
    import re
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

def generate_select_expression(df):
    """Generate a DataFrame select expression with properly aliased columns."""
    column_names = df.schema.names
    seen_aliases = {}
    select_expr = []

    for col_name in column_names:
        parts = col_name.split('.')
        simple_name = parts[-1]  # Last part of the name
        snake_case_name = camel_to_snake(simple_name)
        
        # Handle duplicates by appending the parent's name in snake_case
        if snake_case_name in seen_aliases:
            parent_name = parts[-2] if len(parts) > 1 else 'base'
            snake_case_name = camel_to_snake(parent_name) + '_' + snake_case_name
        
        seen_aliases[snake_case_name] = True
        select_expr.append(col(col_name).alias(snake_case_name))

    return df.select(*select_expr)
