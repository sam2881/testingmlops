from pyspark.sql.types import *

def convert_to_spark_schema(json_schema, definitions):
    """Convert JSON schema to PySpark schema, handling types and references."""
    if isinstance(json_schema, dict):
        # Resolve references first if they exist
        if '$ref' in json_schema:
            ref_resolved = resolve_reference(json_schema, definitions)
            return convert_to_spark_schema(ref_resolved, definitions)

        # Process based on the type of JSON schema
        data_type = json_schema.get('type')
        if data_type == 'object':
            fields = []
            properties = json_schema.get('properties', {})
            for field, prop in properties.items():
                field_schema = convert_to_spark_schema(prop, definitions)
                if field_schema:  # Ensure that the schema is not None
                    fields.append(StructField(field, field_schema, nullable=True))
            return StructType(fields) if fields else None
        elif data_type == 'array':
            items_schema = json_schema.get('items', {})
            element_schema = convert_to_spark_schema(items_schema, definitions)
            return ArrayType(element_schema, True) if element_schema else None
        elif data_type == 'string':
            return StringType()
        elif data_type == 'integer':
            return IntegerType()
        elif data_type == 'boolean':
            return BooleanType()
        elif data_type == 'number':
            return DoubleType()
        else:
            print(f"Warning: Unhandled JSON schema data type '{data_type}' in {json_schema}")
            return StringType()  # Default to StringType for unknown types
    elif isinstance(json_schema, list):
        # Handle the list of types if multiple types are allowed
        if json_schema:
            return convert_to_spark_schema(json_schema[0], definitions)  # Simplification: handle only the first type
        return None
    else:
        print(f"Error: JSON schema type is not dict or list. Received: {json_schema}")
        return None
