def generate_select_expression_from_list(df, column_paths):
    """
    Generate a DataFrame select expression with properly aliased columns from a list.
    :param df: DataFrame, the DataFrame to apply the select expression.
    :param column_paths: list, a list of column paths.
    :return: DataFrame, with columns selected and aliased based on the last segment and handling duplicates.
    """
    seen_aliases = set()
    select_expr = []

    for col_path in column_paths:
        parts = col_path.split('.')
        # Only consider the last part of the path for the alias
        original_name = parts[-1]
        snake_case_name = camel_to_snake(original_name)
        
        # Check for duplicates and modify alias if necessary
        if snake_case_name in seen_aliases:
            # Add parent name if duplicate
            parent_part = camel_to_snake(parts[-2]) if len(parts) > 1 else 'base'
            snake_case_name = f"{parent_part}_{snake_case_name}"
        
        # Check again if the modified name is still a duplicate
        while snake_case_name in seen_aliases:
            snake_case_name += '_x'  # Append '_x' to make it unique if still a duplicate

        seen_aliases.add(snake_case_name)
        select_expr.append(col(".".join(parts)).alias(snake_case_name))

    return df.select(*select_expr)
